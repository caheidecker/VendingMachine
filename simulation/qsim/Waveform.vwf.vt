// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/05/2018 17:14:33"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          VendingMachine
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module VendingMachine_vlg_vec_tst();
// constants                                           
// general purpose registers
reg add_five;
reg add_ten;
reg change_switch;
reg [3:0] SET_BINARY_COST;
// wires                                               
wire [7:0] CHANGE;
wire [15:0] DISPLAY_CHANGE;
wire [15:0] DISPLAY_COST;
wire [15:0] DISPLAY_DEPOSIT;
wire NOT_READY;
wire READY;
wire [7:0] TOTAL;
wire [7:0] TURN_OFF_LEDS;

// assign statements (if any)                          
VendingMachine i1 (
// port map - connection between master ports and signals/registers   
	.add_five(add_five),
	.add_ten(add_ten),
	.CHANGE(CHANGE),
	.change_switch(change_switch),
	.DISPLAY_CHANGE(DISPLAY_CHANGE),
	.DISPLAY_COST(DISPLAY_COST),
	.DISPLAY_DEPOSIT(DISPLAY_DEPOSIT),
	.NOT_READY(NOT_READY),
	.READY(READY),
	.SET_BINARY_COST(SET_BINARY_COST),
	.TOTAL(TOTAL),
	.TURN_OFF_LEDS(TURN_OFF_LEDS)
);
initial 
begin 
#20000000 $finish;
end 
// SET_BINARY_COST[ 3 ]
initial
begin
	SET_BINARY_COST[3] = 1'b0;
	SET_BINARY_COST[3] = #1280000 1'b1;
	SET_BINARY_COST[3] = #6720000 1'b0;
	SET_BINARY_COST[3] = #320000 1'b1;
	SET_BINARY_COST[3] = #5120000 1'b0;
end 
// SET_BINARY_COST[ 2 ]
initial
begin
	SET_BINARY_COST[2] = 1'b0;
	SET_BINARY_COST[2] = #8320000 1'b1;
	SET_BINARY_COST[2] = #5120000 1'b0;
	SET_BINARY_COST[2] = #4640000 1'b1;
end 
// SET_BINARY_COST[ 1 ]
initial
begin
	SET_BINARY_COST[1] = 1'b0;
	SET_BINARY_COST[1] = #8320000 1'b1;
end 
// SET_BINARY_COST[ 0 ]
initial
begin
	SET_BINARY_COST[0] = 1'b0;
	SET_BINARY_COST[0] = #8320000 1'b1;
end 

// add_five
initial
begin
	add_five = 1'b1;
	add_five = #4000000 1'b0;
	add_five = #160000 1'b1;
	add_five = #480000 1'b0;
	add_five = #160000 1'b1;
	add_five = #1440000 1'b0;
	add_five = #160000 1'b1;
	add_five = #3360000 1'b0;
	add_five = #160000 1'b1;
	add_five = #160000 1'b0;
	add_five = #160000 1'b1;
	add_five = #160000 1'b0;
	add_five = #160000 1'b1;
	add_five = #160000 1'b0;
	add_five = #160000 1'b1;
	add_five = #160000 1'b0;
	add_five = #160000 1'b1;
	add_five = #160000 1'b0;
	add_five = #160000 1'b1;
	add_five = #2240000 1'b0;
	add_five = #160000 1'b1;
	add_five = #1280000 1'b0;
	add_five = #160000 1'b1;
	add_five = #2080000 1'b0;
	add_five = #160000 1'b1;
end 

// add_ten
initial
begin
	add_ten = 1'b1;
	add_ten = #1600000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #480000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #480000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #5440000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #160000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #160000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #160000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #4640000 1'b0;
	add_ten = #160000 1'b1;
	add_ten = #320000 1'b0;
	add_ten = #160000 1'b1;
end 

// change_switch
initial
begin
	change_switch = 1'b0;
	change_switch = #7680000 1'b1;
	change_switch = #160000 1'b0;
	change_switch = #4640000 1'b1;
	change_switch = #160000 1'b0;
	change_switch = #4160000 1'b1;
	change_switch = #160000 1'b0;
end 
endmodule

